{"uid":"9330b2a9ecdc404","name":"test_forgotpassword_verify_otp","fullName":"test_cases.test_Forgotpassword.Test_ForgotPassword#test_forgotpassword_verify_otp","historyId":"06f1822ca289347ac5727ef03ef23dc2","time":{"start":1731311740473,"stop":1731311861534,"duration":121061},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF645832BAC]\n\t(No symbol) [0x00007FF645832A70]\n\t(No symbol) [0x00007FF64584DF31]\n\t(No symbol) [0x00007FF6458E7E49]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]","statusTrace":"self = <test_cases.test_Forgotpassword.Test_ForgotPassword object at 0x000001DA42D77290>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"57365e4adab1df9ba41227288d92249c\")>\n\n    def test_forgotpassword_verify_otp(self, setup):\n        self.logger.info(\"*************** forgotpassword_verify_otp started *********************\")\n    \n        # Set up the driver\n        self.driver = setup\n        self.driver.get(self.forgotpasswordpage_url)\n        self.driver.maximize_window()\n        time.sleep(3)\n    \n        # Interact with the Forgot Password page\n        self.forgotpassword = Zoomview_Forgotpassword_Page(self.driver)\n        self.forgotpassword.enter_forgotpasswordpage_email(self.fp_email)\n        self.forgotpassword.click_forgotpasswordpage_submit()\n        time.sleep(5)\n    \n        # Set Chrome options\n        chrome_options = Options()  # Use Options instead of webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--disable-notifications\")\n    \n        # Open a new tab and navigate to Zoho Mail\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get(\"https://www.zoho.com/mail/login.html\")\n        time.sleep(2)\n        self.driver.maximize_window()\n        time.sleep(4)\n    \n        # Interact with Zoho Mail to extract OTP\n        zoho = Zoho_email(self.driver)\n        zoho.signup_for_zoho_for_verify_otp()\n        time.sleep(5)\n    \n        # Extract the OTP and ensure it's correctly formatted\n>       otp = zoho.extract_otp()\n\ntest_cases\\test_Forgotpassword.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\zoho_email.py:229: in extract_otp\n    otp_element = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, \"//div[contains(@class,'jsConTent ')]\")))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DA445032F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF645985C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6C62AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645A1B095+29557]\nE       \t(No symbol) [0x00007FF64598FA50]\nE       \t(No symbol) [0x00007FF64584B56A]\nE       \t(No symbol) [0x00007FF645832BAC]\nE       \t(No symbol) [0x00007FF645832A70]\nE       \t(No symbol) [0x00007FF64584DF31]\nE       \t(No symbol) [0x00007FF6458E7E49]\nE       \t(No symbol) [0x00007FF6458C6F33]\nE       \t(No symbol) [0x00007FF64589116F]\nE       \t(No symbol) [0x00007FF6458922D1]\nE       \tGetHandleVerifier [0x00007FF645D4C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF645D98497+3688311]\nE       \tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF645ADA6B6+813462]\nE       \t(No symbol) [0x00007FF64599AB5F]\nE       \t(No symbol) [0x00007FF645996B74]\nE       \t(No symbol) [0x00007FF645996D10]\nE       \t(No symbol) [0x00007FF645985C1F]\nE       \tBaseThreadInitThunk [0x00007FFD6B36257D+29]\nE       \tRtlUserThreadStart [0x00007FFD6C62AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1731311737477,"stop":1731311737477,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"setup","time":{"start":1731311737477,"stop":1731311740472,"duration":2995},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF645832BAC]\n\t(No symbol) [0x00007FF645832A70]\n\t(No symbol) [0x00007FF64584DF31]\n\t(No symbol) [0x00007FF6458E7E49]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]","statusTrace":"self = <test_cases.test_Forgotpassword.Test_ForgotPassword object at 0x000001DA42D77290>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"57365e4adab1df9ba41227288d92249c\")>\n\n    def test_forgotpassword_verify_otp(self, setup):\n        self.logger.info(\"*************** forgotpassword_verify_otp started *********************\")\n    \n        # Set up the driver\n        self.driver = setup\n        self.driver.get(self.forgotpasswordpage_url)\n        self.driver.maximize_window()\n        time.sleep(3)\n    \n        # Interact with the Forgot Password page\n        self.forgotpassword = Zoomview_Forgotpassword_Page(self.driver)\n        self.forgotpassword.enter_forgotpasswordpage_email(self.fp_email)\n        self.forgotpassword.click_forgotpasswordpage_submit()\n        time.sleep(5)\n    \n        # Set Chrome options\n        chrome_options = Options()  # Use Options instead of webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--disable-notifications\")\n    \n        # Open a new tab and navigate to Zoho Mail\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get(\"https://www.zoho.com/mail/login.html\")\n        time.sleep(2)\n        self.driver.maximize_window()\n        time.sleep(4)\n    \n        # Interact with Zoho Mail to extract OTP\n        zoho = Zoho_email(self.driver)\n        zoho.signup_for_zoho_for_verify_otp()\n        time.sleep(5)\n    \n        # Extract the OTP and ensure it's correctly formatted\n>       otp = zoho.extract_otp()\n\ntest_cases\\test_Forgotpassword.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\zoho_email.py:229: in extract_otp\n    otp_element = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, \"//div[contains(@class,'jsConTent ')]\")))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DA445032F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF645985C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6C62AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645A1B095+29557]\nE       \t(No symbol) [0x00007FF64598FA50]\nE       \t(No symbol) [0x00007FF64584B56A]\nE       \t(No symbol) [0x00007FF645832BAC]\nE       \t(No symbol) [0x00007FF645832A70]\nE       \t(No symbol) [0x00007FF64584DF31]\nE       \t(No symbol) [0x00007FF6458E7E49]\nE       \t(No symbol) [0x00007FF6458C6F33]\nE       \t(No symbol) [0x00007FF64589116F]\nE       \t(No symbol) [0x00007FF6458922D1]\nE       \tGetHandleVerifier [0x00007FF645D4C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF645D98497+3688311]\nE       \tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF645ADA6B6+813462]\nE       \t(No symbol) [0x00007FF64599AB5F]\nE       \t(No symbol) [0x00007FF645996B74]\nE       \t(No symbol) [0x00007FF645996D10]\nE       \t(No symbol) [0x00007FF645985C1F]\nE       \tBaseThreadInitThunk [0x00007FFD6B36257D+29]\nE       \tRtlUserThreadStart [0x00007FFD6C62AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","steps":[],"attachments":[{"uid":"4910be075ceb456f","name":"log","source":"4910be075ceb456f.txt","type":"text/plain","size":112}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_Forgotpassword"},{"name":"subSuite","value":"Test_ForgotPassword"},{"name":"host","value":"ZCSU016-ZL"},{"name":"thread","value":"14388-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_Forgotpassword"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"71896edb120e7255","reportUrl":"http://localhost:8080/job/Zoomview/5/allure/#testresult/71896edb120e7255","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF645832BAC]\n\t(No symbol) [0x00007FF645832A70]\n\t(No symbol) [0x00007FF64584DF31]\n\t(No symbol) [0x00007FF6458E7E49]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]","time":{"start":1731311740473,"stop":1731311861534,"duration":121061}},{"uid":"a37fdbb7cbc35a8c","reportUrl":"http://localhost:8080/job/Zoomview/4/allure/#testresult/a37fdbb7cbc35a8c","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF645832BAC]\n\t(No symbol) [0x00007FF645832A70]\n\t(No symbol) [0x00007FF64584DF31]\n\t(No symbol) [0x00007FF6458E7E49]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]","time":{"start":1731311740473,"stop":1731311861534,"duration":121061}},{"uid":"432319dbc1ffa016","reportUrl":"http://localhost:8080/job/Zoomview/3/allure/#testresult/432319dbc1ffa016","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF645832BAC]\n\t(No symbol) [0x00007FF645832A70]\n\t(No symbol) [0x00007FF64584DF31]\n\t(No symbol) [0x00007FF6458E7E49]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]","time":{"start":1731311740473,"stop":1731311861534,"duration":121061}}]},"tags":[]},"source":"9330b2a9ecdc404.json","parameterValues":[]}