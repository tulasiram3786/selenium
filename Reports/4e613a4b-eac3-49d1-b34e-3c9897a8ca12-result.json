{"name": "TC#1- Verifying cpu graph", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B56A]\n\t(No symbol) [0x00007FF64581FCC5]\n\t(No symbol) [0x00007FF6458CEE07]\n\t(No symbol) [0x00007FF6458E7E21]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]", "trace": "self = <test_cases.test_Infrastructure_summary.Test_Infrastructure_Summary object at 0x000001DA42D8FCE0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe8322ba7c251b2297e153b1b4d2ce5c\")>\n\n    @allure.title(\"TC#1- Verifying cpu graph\")\n    @pytest.mark.smoke\n    def test_verify_cpu_graph(self,setup):\n        self.logger.info(\"*************** Test_Infrastructure *********************\")\n    \n        self.driver = setup\n        self.driver.get(self.loginpage_url)\n>       self.driver.maximize_window()\n\ntest_cases\\test_Infrastructure_summary.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DA445CA600>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF645985C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6C62AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645A1B095+29557]\nE       \t(No symbol) [0x00007FF64598FA50]\nE       \t(No symbol) [0x00007FF64584B56A]\nE       \t(No symbol) [0x00007FF64581FCC5]\nE       \t(No symbol) [0x00007FF6458CEE07]\nE       \t(No symbol) [0x00007FF6458E7E21]\nE       \t(No symbol) [0x00007FF6458C6F33]\nE       \t(No symbol) [0x00007FF64589116F]\nE       \t(No symbol) [0x00007FF6458922D1]\nE       \tGetHandleVerifier [0x00007FF645D4C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF645D98497+3688311]\nE       \tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF645ADA6B6+813462]\nE       \t(No symbol) [0x00007FF64599AB5F]\nE       \t(No symbol) [0x00007FF645996B74]\nE       \t(No symbol) [0x00007FF645996D10]\nE       \t(No symbol) [0x00007FF645985C1F]\nE       \tBaseThreadInitThunk [0x00007FFD6B36257D+29]\nE       \tRtlUserThreadStart [0x00007FFD6C62AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f6c5bea6-5fe0-45ca-8244-a17126e00a1d-attachment.txt", "type": "text/plain"}], "start": 1731317212099, "stop": 1731317212163, "uuid": "029a2466-901b-4c50-b9ff-fb3288cdbad0", "historyId": "d5c85361c302745a6c300b8da77dbfa3", "testCaseId": "d5c85361c302745a6c300b8da77dbfa3", "fullName": "test_cases.test_Infrastructure_summary.Test_Infrastructure_Summary#test_verify_cpu_graph", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_Infrastructure_summary"}, {"name": "subSuite", "value": "Test_Infrastructure_Summary"}, {"name": "host", "value": "ZCSU016-ZL"}, {"name": "thread", "value": "14388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_Infrastructure_summary"}]}