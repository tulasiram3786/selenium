{"name": "test_verify_process_topmemory_table", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645A1B095+29557]\n\t(No symbol) [0x00007FF64598FA50]\n\t(No symbol) [0x00007FF64584B399]\n\t(No symbol) [0x00007FF6458A0B0F]\n\t(No symbol) [0x00007FF64589354E]\n\t(No symbol) [0x00007FF6458C718A]\n\t(No symbol) [0x00007FF645892E86]\n\t(No symbol) [0x00007FF6458C73A0]\n\t(No symbol) [0x00007FF6458E851C]\n\t(No symbol) [0x00007FF6458C6F33]\n\t(No symbol) [0x00007FF64589116F]\n\t(No symbol) [0x00007FF6458922D1]\n\tGetHandleVerifier [0x00007FF645D4C96D+3378253]\n\tGetHandleVerifier [0x00007FF645D98497+3688311]\n\tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\n\tGetHandleVerifier [0x00007FF645ADA6B6+813462]\n\t(No symbol) [0x00007FF64599AB5F]\n\t(No symbol) [0x00007FF645996B74]\n\t(No symbol) [0x00007FF645996D10]\n\t(No symbol) [0x00007FF645985C1F]\n\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\n\tRtlUserThreadStart [0x00007FFD6C62AF28+40]", "trace": "self = <test_cases.test_Infrastructure_process.Test_Infrastructure_Process object at 0x000001DA42D8F260>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"786e55b782b3c62a63ba22638820e499\")>\n\n    def test_verify_process_topmemory_table(self, setup):\n        self.logger.info(\"*************** Test_Infrastructure process Top Memory table data *********************\")\n    \n        self.driver = setup\n        self.driver.get(self.loginpage_url)\n        self.driver.maximize_window()\n        time.sleep(2)\n        self.login = Zoomview_Login_Page(self.driver)  # Corrected instantiation\n        self.login.enter_email(self.email)\n        self.login.enter_password(self.password)\n        self.login.click_login()\n        time.sleep(8)  # Wait for the login to process\n        self.infrastructure = Zoomview_Infrastructure_Page(self.driver)\n        time.sleep(3)\n        self.infrastructure.infrastructure_page_button()\n        time.sleep(4)\n        self.infrastructure.click_infrastructure_actions_button()\n        time.sleep(3)\n        self.driver.find_element(By.XPATH, \"//div[text()='Process']\").click()\n        time.sleep(7)\n    \n>       self.driver.find_element(By.XPATH, \"(//div[text()='Top Memory'])[1]\").click()\n\ntest_cases\\test_Infrastructure_process.py:197: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DA44632750>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF645985C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6B36257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6C62AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645A1B095+29557]\nE       \t(No symbol) [0x00007FF64598FA50]\nE       \t(No symbol) [0x00007FF64584B399]\nE       \t(No symbol) [0x00007FF6458A0B0F]\nE       \t(No symbol) [0x00007FF64589354E]\nE       \t(No symbol) [0x00007FF6458C718A]\nE       \t(No symbol) [0x00007FF645892E86]\nE       \t(No symbol) [0x00007FF6458C73A0]\nE       \t(No symbol) [0x00007FF6458E851C]\nE       \t(No symbol) [0x00007FF6458C6F33]\nE       \t(No symbol) [0x00007FF64589116F]\nE       \t(No symbol) [0x00007FF6458922D1]\nE       \tGetHandleVerifier [0x00007FF645D4C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF645D98497+3688311]\nE       \tGetHandleVerifier [0x00007FF645D8D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF645ADA6B6+813462]\nE       \t(No symbol) [0x00007FF64599AB5F]\nE       \t(No symbol) [0x00007FF645996B74]\nE       \t(No symbol) [0x00007FF645996D10]\nE       \t(No symbol) [0x00007FF645985C1F]\nE       \tBaseThreadInitThunk [0x00007FFD6B36257D+29]\nE       \tRtlUserThreadStart [0x00007FFD6C62AF28+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "a28ba81a-c5a4-45a9-a1c8-a9ae811f5e51-attachment.txt", "type": "text/plain"}], "start": 1731317107204, "stop": 1731317146227, "uuid": "6120b564-b434-479e-b77f-10257f8a1c5f", "historyId": "fcc59bce2d988e33511085e7dacecc89", "testCaseId": "fcc59bce2d988e33511085e7dacecc89", "fullName": "test_cases.test_Infrastructure_process.Test_Infrastructure_Process#test_verify_process_topmemory_table", "labels": [{"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_Infrastructure_process"}, {"name": "subSuite", "value": "Test_Infrastructure_Process"}, {"name": "host", "value": "ZCSU016-ZL"}, {"name": "thread", "value": "14388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_Infrastructure_process"}]}